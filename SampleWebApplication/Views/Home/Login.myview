using @{SampleWebApplication.Models}
model @{LoginViewModel}

// Przykład zastosowania rekurencji w funkcjach widokowych
mixin ShowTreeStructure(@{Node node})
<|
	CommonHelper.If(
		@{node.Children.Any()},
		<|
			CommonHelper.P(<- Węzęł o nazwie "@{node.Name}" z dziećmi: ->)
			CommonHelper.Ul(
				<|
					-- foreach (var child in node.Children) {
						CommonHelper.Li(<| ShowTreeStructure(@{child}) |>)
					-- }
				|>)
		|>,
		<| 
			CommonHelper.P(<- Węzęł o nazwie "@{node.Name}" bez dzieci :( ->) 
		|>)
|>

mixin Part1()
<|
	CommonHelper.H3( "Operacje na zmiennych" )

	var temp = <-
		Linia tekstu bez helpera </br>
		-- var a = 2;
		Przypadkowa zmienna: @{a} </br>
		->

	var temp2 = <|
		CommonHelper.Line( "Linia tekstu" )
		eval temp
		|>

	var temp3 = <|
		CommonHelper.Line( "Linia tekstu2" )
		<-
			<p> Przypadkowy tekst w paragrafie </p>
		->
		eval temp
		eval temp2
		|>
	eval temp3

	var temp4 = <-
			Witaj świecie!! Dzisiaj jest: @{DateTime.Now}
		->
	eval temp4
|>

mixin Part2(@{Node sample})
<|
	CommonHelper.H3( "Rekurencyjny szablon" )
	ShowTreeStructure( @{sample} )
|>

mixin Part3()
<|
	CommonHelper.H3( "Link do akcji" )
	CommonHelper.ActionLink(@{"Home"}, @{"Basic"}, "Kliknij tutaj")
|>

CommonHelper.Html(
	"Strona Prywatna",
	<|
		CommonHelper.H1(<- Witaj @{Model.Name} !! ->)
		CommonHelper.H2(<- Pokaz możliwosci silnika ->)
		// podział widoku na części
		Part1()
		Part2(@{Model.Tree})
		Part3()
	|>)