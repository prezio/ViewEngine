<#@ template language="C#" #>

/*  ===========================================================
     
    This code is auto generated
    This is definition of class for rendering "<#= ViewName #>"
    Code was generated by ViewEngine
    
    ===========================================================
*/ 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <#= NamespaceName #>
{
	class <#= ViewName #>Renderer
	{
        private void InvokeVariable(IReadOnlyDictionary<string, Action> environment, string varName)
        {
            if (environment.ContainsKey(varName))
            {
                environment[varName]();
            }
        }

		public StreamWriter Output { get; }
        
        // SECTION WITH MODEL DECLARATIONS ======

		<#= ModelDeclarations #>
        
        // END OF SECTION WITH MODEL DECLARATIONS
        // ======================================


        // SECTION WITH MIXIN DECLARATIONS ======

        <#= MixinDeclarations #>
    
        // END OF SECTION WITH MIXIN DECLARATIONS
        // ======================================        


        // View Renderer Constructor
		public <#= ViewName #>Renderer(StreamWriter streamWriter
			<#= ModelParams #>)
		{
			Output = streamWriter;
			<#= ModelAssignments #>
		}

        // Render Method
		public void Render(IReadOnlyDictionary<string, Action> environment)
		{
			<#= ContentSection #>
		}
	}
    
    // <#= ViewName #>RenderManager - generated class which
    // should be used for rendering views
    public class <#= ViewName #>RenderManager
    {
        public void Render(StreamWriter streamWriter
			<#= ModelParams #>)
		{
			var renderer = new <#= ViewName #>Renderer(streamWriter
				<#= ModelPassed #>);
            var environment = new Dictionary<string, Action>();
			renderer.Render(environment);
		}
    }
}